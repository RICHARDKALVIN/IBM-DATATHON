# -*- coding: utf-8 -*-
"""IBM Datathon.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lYBwoKdZNbjLs9uC1Ebrxtx_3YqKz3j3

Team Name:Code Winners

Team Number:SAV97
"""

# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Load and Read the dataset
df = pd.read_csv('/content/breast_cancer.csv')
df.head()

df.tail()

df.info()

df.shape

#Checking Null values
df.isnull().sum()

df.columns

# Drop the 'id' column
df = df.drop('id', axis=1)

# Encode the 'diagnosis' column (Malignant: M, Benign: B) to binary values (M -> 1, B -> 0)
label_encoder = LabelEncoder()
df['diagnosis'] = label_encoder.fit_transform(df['diagnosis'])

# Select the important columns for prediction
features = [
    'radius_mean', 'perimeter_mean', 'area_mean',
    'concavity_mean', 'concave points_mean',
    'compactness_mean', 'texture_mean',
    'symmetry_mean', 'radius_worst', 'area_worst'
]

# Input variable
X = df[features]
X

# Target variable
y = df['diagnosis']
y

# Split the data into training and testing sets (60% train, 40% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42)

X_train.shape

X_test.shape

y_train.shape

y_test.shape

# Create and train the Logistic Regression model
model = LogisticRegression(max_iter=10000)
model.fit(X_train, y_train)

# Make predictions on the test set for accuracy
y_pred = model.predict(X_test)

# Evaluate the model's accuracy and print the accuracy
accuracy = accuracy_score(y_test, y_pred)
accuracy

# Function to predict B or M for input features
def predict_cancer(features_input):
    input_df = pd.DataFrame([features_input], columns=features)
    prediction = model.predict(input_df)
    prediction_label = label_encoder.inverse_transform(prediction)
    return prediction_label[0]

# Print the Output

# Input from user as a list
print(f"Please enter the 10 feature values in this order:\n{features}")
input_features = list(map(float, input("Enter the values separated by commas: ").split(',')))
if len(input_features) != len(features):
    print(f"Error: You must enter exactly {len(features)} values.")
else:
    result = predict_cancer(input_features)
    cancer_type = "Malignant" if result == 'M' else "Benign"
    print(f'Diagnosis for breast cancer prediction is: {cancer_type}')

print(f"Please enter the 10 feature values in this order:\n{features}")
input_features = list(map(float, input("Enter the values separated by commas: ").split(',')))
if len(input_features) != len(features):
    print(f"Error: You must enter exactly {len(features)} values.")
else:
    result = predict_cancer(input_features)
    cancer_type = "Malignant" if result == 'M' else "Benign"
    print(f'Diagnosis for breast cancer prediction is: {cancer_type}')